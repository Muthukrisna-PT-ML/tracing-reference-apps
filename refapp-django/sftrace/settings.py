"""
Django settings for sftrace project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import json
from elasticapm.handlers.logging import Formatter
from sf_apm_lib import snappyflow as sf

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5q3=yw1**r&jphzn765*_9!&mka$7byux$jb=w$#tq$mz*#-z!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    '*'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_swagger',
    'elasticapm.contrib.django'
]

MIDDLEWARE = [
    'elasticapm.contrib.django.middleware.TracingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sftrace.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sftrace.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# Elastic configuration
ELASTIC_HOST = os.getenv('ELASTIC_HOST')
ELASTIC_USERNAME = ''
ELASTIC_PASSWORD = ''
ELASTIC_PORT = os.getenv('ELASTIC_PORT')
ELASTIC_PROTOCOL = 'http'

# MYSQL configuration
MYSQL_HOST = os.getenv('MYSQL_HOST')
MYSQL_USERNAME = os.getenv('MYSQL_USER')
MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD')
MYSQL_PORT = 3306

log_dir = "/var/log/snappyflow"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

logpath_application = os.path.join(log_dir, "django" + '.log')

FILE_SIZE_MB = 5
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            # 'format': "[%(asctime)s.%(msecs)03d] %(levelname)5s [%(name)s:%(lineno)s:%(funcName)10s()] %(message)s",
            'format': "[%(asctime)s.%(msecs)03d] %(levelname)5s [%(thread)d:%(module)s:%(funcName)10s():%(lineno)s] "
                      "%(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
       'elastic': {
            'format': '[%(asctime)s] [%(levelname)s] [%(message)s]',
            'class': 'elasticapm.handlers.logging.Formatter',
            'datefmt': "%d/%b/%Y %H:%M:%S"
        }
    },
    'handlers': {
        'elasticapm_log': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': logpath_application,
            'formatter': 'elastic'
        },
        'application_log': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': logpath_application,
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'application': {
            'handlers': ['application_log'],
            'level': 'INFO',
        },
        'elasticapm': {
            'handlers': ['elasticapm_log'],
            'level': 'INFO',
        },

        # # Log errors from the Elastic APM module to the console (recommended)
        # 'elasticapm.errors': {
        #     'level': 'ERROR',
        #     'handlers': ['elasticapm_log'],
        #     'propagate': False,
        # },
    }
}


#<SFTRACE-CONFIG> add the below agent specific variable 
# Replace <service_name> with approariate value. The service_name is used to identify and filter the traces related to an application and should be named appropriately to distinctly identify it.  Service name must only contain characters from the ASCII alphabet, numbers, dashes, underscores and spaces.
try:

    project_name = os.getenv('PROJECT_NAME')
    app_name = os.getenv('APP_NAME')
    profile_key = os.getenv('SF_PROFILE_KEY')

    SFTRACE_CONFIG = sf.get_trace_config(profile_key, project_name, app_name)

    ELASTIC_APM={
        'SERVICE_NAME': "refapp-django",
        'SERVER_URL': SFTRACE_CONFIG.get('SFTRACE_SERVER_URL'),
        'GLOBAL_LABELS': SFTRACE_CONFIG.get('SFTRACE_GLOBAL_LABELS'),
        'VERIFY_SERVER_CERT': SFTRACE_CONFIG.get('SFTRACE_VERIFY_SERVER_CERT'),
        'SPAN_FRAMES_MIN_DURATION': SFTRACE_CONFIG.get('SFTRACE_SPAN_FRAMES_MIN_DURATION'),
        'STACK_TRACE_LIMIT': SFTRACE_CONFIG.get('SFTRACE_STACK_TRACE_LIMIT'),
        'CAPTURE_SPAN_STACK_TRACES': SFTRACE_CONFIG.get('SFTRACE_CAPTURE_SPAN_STACK_TRACES'),
        'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True,
        'CENTRAL_CONFIG': False,
        'DEBUG': True
    }

except Exception as error:
    print("Error while fetching snappyflow tracing configurations", error)
